package business.city;

import business.ASException;
import business.IncorrectInputException;
import business.city.as.ASCity;
import business.city.factory.ASCityFactory;
import business.client.TClient;
import business.client.as.ASClient;
import business.client.factory.ASClientFactory;
import business.rental.TRental;
import business.rental.TRentalDetails;
import business.rental.as.ASRental;
import business.rental.factory.ASRentalFactory;
import business.vehicle.TVehicle;
import business.vehicle.as.ASVehicle;
import business.vehicle.factory.ASVehicleFactory;
import integration.city.dao.DAOCity;
import integration.city.factory.DAOCityFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collection;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;


public class ASCityTest {

    private static Date initD = new Date(1540373530000L);
    private static Date endD = new Date(1543051930000L);
    private static ASCity 	as = ASCityFactory.getInstance().generateASCity();
	private static TCity tc = new TCity(null,"Madrid",true);
    private static ASVehicle 	asV = ASVehicleFactory.getInstance().generateASVehicle();
    private static TVehicle tv = new TVehicle(null,"Audi",6000,0,
            false,null,false,"Car");
    private static ASClient asClient = ASClientFactory.getInstance().generateASClient();
    private static TClient tclient = new TClient(null,"00000000X",0,false);
    private static ASRental asR = ASRentalFactory.getInstance().generateASRental();
    private static TRental tr = new TRental(null,null,false,
            10,null,initD,endD);

    @BeforeEach
	private void setUp() throws Exception {
		DAOCity dao = DAOCityFactory.getInstance().generateDAOCity();
		dao.deleteAll();
	}

	//create method tests
	@Test
	public void createCitySuccessful() throws ASException, IncorrectInputException {
		assertTrue(as.create(tc) > 0);
	}

	@Test
	public void createCityIncorrectInput1(){
	    tc.setId(-1); //id it's generated by database,
                    // so in create method must be null as input
		assertThrows(IncorrectInputException.class, () -> {as.create(tc);});
	}


	//drop method tests

	@Test
	public void dropCitySuccessful() throws ASException, IncorrectInputException {
        Integer idV = asV.create(tv);
		Integer id = as.create(tc);
		Integer idClient = asClient.create(tclient);
		tv.setCity(id);
		tr.setIdVehicle(idV);
		tr.setIdClient(idClient);
        asR.create(tr);

        Integer tmp = as.drop(id);
        assertEquals(id,tmp);
        Collection<TRentalDetails> allRentals = asR.showAll();

        for(TRentalDetails r : allRentals){
            assertFalse(r.getRental().isActive());
            assertFalse(r.getClient().isActive());
            assertFalse(r.getVehicle().isActive());
        }
    }


	@Test
	public void dropCityIncorrectInput1(){
		Integer id = 0; //id must be > 0
		assertThrows(IncorrectInputException.class, () -> {as.drop(id);});
	}

	@Test
	public void dropCityIncorrectInput2(){
	    Integer id = -1; //id must be > 0
		assertThrows(IncorrectInputException.class, () -> {as.drop(id);});
	}

	@Test
	public void dropCityNotExists(){
		Integer id = 1;
		assertThrows(ASException.class, () -> {as.drop(id);});
	}

	@Test
	public void dropCityAlreadyInactive() throws ASException, IncorrectInputException {
		Integer id = as.create(tc);
		as.drop(id);
		assertThrows(ASException.class, () -> {as.drop(id);});
	}

	@Test
	public void dropCityWithActiveVehicles() throws ASException, IncorrectInputException {
		Integer id = as.create(tc);

		tv.setId(id);
		asV.create(tv);

		assertThrows(ASException.class, () -> {as.drop(id);});
	}


	//show method tests
	@Test
	public void showCitySuccessful() throws ASException, IncorrectInputException {
		Integer id = as.create(tc);

		TCity tmp = as.show(id);

		assertEquals(tmp.getId(),id);
		assertEquals(tmp.getName(),tc.getName());
	}

	@Test
	public void showCityIncorrectInput1(){
		Integer id = 0; //id must be > 0
		assertThrows(IncorrectInputException.class, () -> {as.show(id);});
	}

	@Test
	public void showCityIncorrectInput2(){
		Integer id = -1; //id must be > 0
		assertThrows(IncorrectInputException.class, () -> {as.show(id);});
	}

	@Test
	public void showCityNotExists(){
		Integer id = 1;
		assertThrows(ASException.class, () -> {as.show(id);});
	}

	//showAll method tests
	@Test
	public void showAllCitySuccessful1() throws ASException, IncorrectInputException {
		Integer idMad = as.create(tc);
		tc.setName("Barcelona");
		Integer idBcn = as.create(tc);
		Collection<TCity> c = as.showAll();

		for(TCity tmp : c){
		    if(tmp.getId().equals(idMad))
			   assertTrue(checkTransferValues(tmp,"Madrid"));
			else
			    assertTrue(checkTransferValues(tmp,"Barcelona"));

		}
	}

    @Test
	public void showAllCitySuccessful2() throws ASException {
		Collection<TCity> c = as.showAll();
		assertTrue(c.isEmpty());
	}

    private boolean checkTransferValues(TCity out, String city) {
        return out.getName().equals(city) && out.isActive();
    }

	//showClientsByCity method
	@Test
	public void showClientsByCitySuccessful() throws ASException, IncorrectInputException {

        //data for city 1
		Integer idClient = asClient.create(tclient);
        Integer idCity = as.create(tc);

        tv.setCity(idCity);
		Integer idV = asV.create(tv);

		tr.setIdClient(idClient);
		tr.setIdVehicle(idV);
        asR.create(tr);

        //data for city 2
        tclient.setIdCardNumber("11111111X");
        Integer idClientFail = asClient.create(tclient);

		tc.setName("Barcelona");
        Integer idCity2 = as.create(tc);

        tv.setCity(idCity2);
       	Integer idVFail = asV.create(tv);

        tr.setIdVehicle(idVFail);
        tr.setIdClient(idClientFail);
        asR.create(tr);

        Collection<TClient> out = as.showClientsByCity(idCity);

        for(TClient client : out){
            assertEquals(client.getId(), idClient); //city 1
            assertNotEquals(client.getId(),idClientFail); //city 2
        }
	}

	//update method tests
	@Test
	public void updateCitySuccessful() throws ASException, IncorrectInputException {
		as.create(tc);

		tc.setName("Barcelona");
		tc.setActive(true);
		Integer id = as.update(tc);

		assertEquals(id,tc.getId());

		TCity tmp = as.show(id);
		assertEquals(tmp.getName(),tc.getName());
	}

    @Test
    public void updateCityIncorrectInputID1(){
        tc.setId(null);//id must be > 0
        tc.setActive(true);
        assertThrows(IncorrectInputException.class, () -> {as.update(tc);});
    }

	@Test
	public void updateCityIncorrectInputID2(){
		tc.setId(0);//id must be > 0
        tc.setActive(true);
		assertThrows(IncorrectInputException.class, () -> {as.update(tc);});
	}

	@Test
	public void updateCityIncorrectInputID3(){
		tc.setId(-1); //id must be > 0
        tc.setActive(true);
		assertThrows(IncorrectInputException.class, () -> {as.update(tc);});
	}

    @Test
    public void updateCityIncorrectInput3(){
        tc.setActive(false); //active must be true on the update operation, to deactivate the entity,
                            // it's necessary to use the drop operation
        assertThrows(IncorrectInputException.class,() -> {as.update(tc);});
    }

	@Test
	public void updateCityNotExists(){
	    tc.setId(32);
	    tc.setActive(true);
		assertThrows(ASException.class, () -> {as.update(tc);});
	}

}
