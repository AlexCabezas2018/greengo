/*
package business.city.as;

import business.city.TCity;
import business.city.as.imp.ASCityImp;
import business.client.TClient;
import business.vehicle.TVehicle;
import integration.city.dao.DAOCity;
import integration.city.factory.DAOCityFactory;
import integration.client.dao.DAOClient;
import integration.client.factory.DAOClientFactory;
import integration.vehicle.dao.DAOVehicle;
import integration.vehicle.factory.DAOVehicleFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


public class ASCityTest {

	@BeforeEach
	public void setUp() throws Exception {
		DAOCity dao = DAOCityFactory.getInstance().generateDAOCity();
		dao.deleteAll();
	}

	//create method tests
	@Test
	public void createCitySuccessful(){
		TCity tc = new TCity(null, "Madrid", false);
		ASCityImp as = new ASCityImp();
		assert(as.create(tc) > 0);
	}

	@Test (expected = IncorrectInputException.class)
	public void createCityIncorrectInput1(){
		ASCityImp as = new ASCityImp();
		TCity tc = new TCity(-1, "Madrid", false); //id it's generated by database, so in create method must be null as input
		as.create(tc);
	}

	@Test (expected = IncorrectInputException.class)
	public void createCityIncorrectInput2(){
		ASCityImp as = new ASCityImp();
		TCity tc = new TCity(null, "Madrid", true); //active must be false as input
		as.create(tc);
	}

	//EN FUNCION DE SI HAY CAMBIOS O NO EN LOS CASOS DE USO QUITARLO
	@Test (expected = ASException.class)
	public void createCityAlreadyExists(){
		TCity old = new TCity(null, "Madrid",false);
		ASCityImp as = new ASCityImp();
		as.create(old);

		TCity tc = new TCity(null, "Madrid", false); //city already exists
		as.create(tc);
	}

	//drop method tests

	@Test
	public void dropCitySuccessful(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();

		Integer id = as.create(tmp);

		assert(as.drop(id) == id);
	}


	@Test (expected = IncorrectInputException.class)
	public void dropCityIncorrectInput1(){
		Integer id = 0; //id must be > 0

		ASCityImp as = new ASCityImp();
		as.drop(id);
	}

	@Test (expected = IncorrectInputException.class)
	public void dropCityIncorrectInput2(){
		Integer id = -1; //id must be > 0

		ASCityImp as = new ASCityImp();
		as.drop(id);
	}

	@Test (expected = ASException.class)
	public void dropCityNotExists(){
		Integer id = 1;
		ASCityImp as = new ASCityImp();

		as.drop(id);
	}

	@Test (expected = ASException.class)
	public void dropCityAlreadyInactive(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();

		Integer id = as.create(tmp);
		as.drop(id);

		as.drop(id);
	}

	@Test (expected = ASException.class)
	public void dropCityWithActiveVehicles(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();
		Integer id = as.create(tmp);

		DAOVehicle dao = DAOVehicleFactory.getInstance().generateDAOVehicle();
		TVehicle tv = new TVehicle(null,"Audi",1000,0,false,1,false);
		dao.create(tv);

		as.drop(id);
	}


	//show method tests
	@Test
	public void showCitySuccessful(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();
		Integer id = as.create(tmp);

		TCity tc = as.show(id);
		assertTrue(tc.getID() == id);
		assertTrue(tc.getName().equals(tmp.getName())); //revisar
		assertTrue(tc.getActive() == true);
	}

	@Test (expected = IncorrectInputException.class)
	public void showCityIncorrectInput1(){
		Integer id = 0; //id must be > 0

		ASCityImp as = new ASCityImp();
		as.show(id);
	}

	@Test (expected = IncorrectInputException.class)
	public void showCityIncorrectInput2(){
		Integer id = -1; //id must be > 0

		ASCityImp as = new ASCityImp();
		as.show(id);
	}

	@Test (expected = ASException.class)
	public void showCityNotExists(){
		Integer id = 1;
		ASCityImp as = new ASCityImp();

		as.show(id);
	}

	//showAll tests
	@Test
	public void showAllCitySuccessful1(){
		ASCityImp as = new ASCityImp();
		TCity tc1 = new TCity(null,"Madrid",false);
		Integer idMad = as.create(tc1);
		tc1.setID(idMad);
		TCity tc2 = new TCity(null,"Barcelona",false);
		Integer idBcn = as.create(tc2);
		tc2.setID(idBcn);

		Collection<TCity> c = as.showAll();

		//revisar
		for(TCity tmp : c){
			assertTrue(tmp.getID() == tc1.getID() || tmp.getID() == tc2.getID());
			assertTrue(tmp.getName().equals(tc1.getName()) || tmp.getName().equals(tc2.getName())); //revisar
			assertTrue(tmp.getActive() == true);
		}
	}

	@Test
	public void showAllCitySuccessful2(){
		ASCityImp as = new ASCityImp();
		Collection<TCity> c = as.showAll();
		assertTrue(c.isEmpty());
	}

	//TODO showClientsByCity tests

	@Test
	public void showClientsByCitySuccessful(){
		DAOClient dc = DAOClientFactory.getInstance().generateDAOClient();
		TClient tcl = new TClient(null,"00000000X",0,false);
		dc.create(tcl);

	}
	//update method tests

	@Test
	public void updateCitySuccessful(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();
		Integer id = as.create(tmp);

		TCity tc = new TCity(id,"Barcelona",true);
		id = as.update(tc);
		assertTrue(id = tc.getID());

		tmp = as.show(id);
		assertTrue(tmp.getName().equals("Barcelona"));
	}

	@Test (expected = ASException.class)
	public void updateCityIncorrectInput1(){
		ASCityImp as = new ASCityImp();
		TCity tmp = new TCity(0,"Madrid",false); //id must be > 0

		as.update(tmp);
	}

	@Test (expected = ASException.class)
	public void updateCityIncorrectInput2(){
		ASCityImp as = new ASCityImp();
		TCity tmp = new TCity(-1,"Madrid",false); //id must be > 0

		as.update(tmp);
	}

	@Test (expected = ASException.class)
	public void updateCityNotExists(){
		TCity tmp = new TCity(null,"Madrid",false);
		ASCityImp as = new ASCityImp();
		Integer id = as.create(tmp);

		TCity tc = new TCity(32,"Barcelona",true);
		as.update(tc);
	}

}
*/
